package com.littleGreenMan.Pong_Madness.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.littleGreenMan.Pong_Madness.model.LeaderboardPlayer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LEADERBOARD_PLAYER.
*/
public class LeaderboardPlayerDao extends AbstractDao<LeaderboardPlayer, Long> {

    public static final String TABLENAME = "LEADERBOARD_PLAYER";

    /**
     * Properties of entity LeaderboardPlayer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Identifier = new Property(0, long.class, "identifier", true, "IDENTIFIER");
        public final static Property GamesPlayedCount = new Property(1, Integer.class, "gamesPlayedCount", false, "GAMES_PLAYED_COUNT");
        public final static Property GamesWonCount = new Property(2, Integer.class, "gamesWonCount", false, "GAMES_WON_COUNT");
        public final static Property Rating = new Property(3, Integer.class, "rating", false, "RATING");
        public final static Property LeaderboardId = new Property(4, Long.class, "leaderboardId", false, "LEADERBOARD_ID");
        public final static Property PlayerId = new Property(5, Long.class, "playerId", false, "PLAYER_ID");
    };

    private DaoSession daoSession;

    private Query<LeaderboardPlayer> leaderboard_LeaderboardPlayerListQuery;
    private Query<LeaderboardPlayer> player_LeaderboardPlayerListQuery;

    public LeaderboardPlayerDao(DaoConfig config) {
        super(config);
    }
    
    public LeaderboardPlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LEADERBOARD_PLAYER' (" + //
                "'IDENTIFIER' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: identifier
                "'GAMES_PLAYED_COUNT' INTEGER," + // 1: gamesPlayedCount
                "'GAMES_WON_COUNT' INTEGER," + // 2: gamesWonCount
                "'RATING' INTEGER," + // 3: rating
                "'LEADERBOARD_ID' INTEGER," + // 4: leaderboardId
                "'PLAYER_ID' INTEGER);"); // 5: playerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LEADERBOARD_PLAYER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LeaderboardPlayer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIdentifier());
 
        Integer gamesPlayedCount = entity.getGamesPlayedCount();
        if (gamesPlayedCount != null) {
            stmt.bindLong(2, gamesPlayedCount);
        }
 
        Integer gamesWonCount = entity.getGamesWonCount();
        if (gamesWonCount != null) {
            stmt.bindLong(3, gamesWonCount);
        }
 
        Integer rating = entity.getRating();
        if (rating != null) {
            stmt.bindLong(4, rating);
        }
 
        Long leaderboardId = entity.getLeaderboardId();
        if (leaderboardId != null) {
            stmt.bindLong(5, leaderboardId);
        }
 
        Long playerId = entity.getPlayerId();
        if (playerId != null) {
            stmt.bindLong(6, playerId);
        }
    }

    @Override
    protected void attachEntity(LeaderboardPlayer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LeaderboardPlayer readEntity(Cursor cursor, int offset) {
        LeaderboardPlayer entity = new LeaderboardPlayer( //
            cursor.getLong(offset + 0), // identifier
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // gamesPlayedCount
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // gamesWonCount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // rating
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // leaderboardId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // playerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LeaderboardPlayer entity, int offset) {
        entity.setIdentifier(cursor.getLong(offset + 0));
        entity.setGamesPlayedCount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGamesWonCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRating(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLeaderboardId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPlayerId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LeaderboardPlayer entity, long rowId) {
        entity.setIdentifier(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LeaderboardPlayer entity) {
        if(entity != null) {
            return entity.getIdentifier();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "leaderboardPlayerList" to-many relationship of Leaderboard. */
    public List<LeaderboardPlayer> _queryLeaderboard_LeaderboardPlayerList(Long leaderboardId) {
        synchronized (this) {
            if (leaderboard_LeaderboardPlayerListQuery == null) {
                QueryBuilder<LeaderboardPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LeaderboardId.eq(null));
                leaderboard_LeaderboardPlayerListQuery = queryBuilder.build();
            }
        }
        Query<LeaderboardPlayer> query = leaderboard_LeaderboardPlayerListQuery.forCurrentThread();
        query.setParameter(0, leaderboardId);
        return query.list();
    }

    /** Internal query to resolve the "leaderboardPlayerList" to-many relationship of Player. */
    public List<LeaderboardPlayer> _queryPlayer_LeaderboardPlayerList(Long playerId) {
        synchronized (this) {
            if (player_LeaderboardPlayerListQuery == null) {
                QueryBuilder<LeaderboardPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayerId.eq(null));
                player_LeaderboardPlayerListQuery = queryBuilder.build();
            }
        }
        Query<LeaderboardPlayer> query = player_LeaderboardPlayerListQuery.forCurrentThread();
        query.setParameter(0, playerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLeaderboardDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPlayerDao().getAllColumns());
            builder.append(" FROM LEADERBOARD_PLAYER T");
            builder.append(" LEFT JOIN LEADERBOARD T0 ON T.'LEADERBOARD_ID'=T0.'IDENTIFIER'");
            builder.append(" LEFT JOIN PLAYER T1 ON T.'PLAYER_ID'=T1.'IDENTIFIER'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LeaderboardPlayer loadCurrentDeep(Cursor cursor, boolean lock) {
        LeaderboardPlayer entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Leaderboard leaderboard = loadCurrentOther(daoSession.getLeaderboardDao(), cursor, offset);
        entity.setLeaderboard(leaderboard);
        offset += daoSession.getLeaderboardDao().getAllColumns().length;

        Player player = loadCurrentOther(daoSession.getPlayerDao(), cursor, offset);
        entity.setPlayer(player);

        return entity;    
    }

    public LeaderboardPlayer loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LeaderboardPlayer> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LeaderboardPlayer> list = new ArrayList<LeaderboardPlayer>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LeaderboardPlayer> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LeaderboardPlayer> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
