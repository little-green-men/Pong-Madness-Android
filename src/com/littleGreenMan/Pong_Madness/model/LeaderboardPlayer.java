package com.littleGreenMan.Pong_Madness.model;

import com.littleGreenMan.Pong_Madness.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LEADERBOARD_PLAYER.
 */
public class LeaderboardPlayer {

    private long identifier;
    private Integer gamesPlayedCount;
    private Integer gamesWonCount;
    private Integer rating;
    private Long leaderboardId;
    private Long playerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LeaderboardPlayerDao myDao;

    private Leaderboard leaderboard;
    private Long leaderboard__resolvedKey;

    private Player player;
    private Long player__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LeaderboardPlayer() {
    }

    public LeaderboardPlayer(long identifier) {
        this.identifier = identifier;
    }

    public LeaderboardPlayer(long identifier, Integer gamesPlayedCount, Integer gamesWonCount, Integer rating, Long leaderboardId, Long playerId) {
        this.identifier = identifier;
        this.gamesPlayedCount = gamesPlayedCount;
        this.gamesWonCount = gamesWonCount;
        this.rating = rating;
        this.leaderboardId = leaderboardId;
        this.playerId = playerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLeaderboardPlayerDao() : null;
    }

    public long getIdentifier() {
        return identifier;
    }

    public void setIdentifier(long identifier) {
        this.identifier = identifier;
    }

    public Integer getGamesPlayedCount() {
        return gamesPlayedCount;
    }

    public void setGamesPlayedCount(Integer gamesPlayedCount) {
        this.gamesPlayedCount = gamesPlayedCount;
    }

    public Integer getGamesWonCount() {
        return gamesWonCount;
    }

    public void setGamesWonCount(Integer gamesWonCount) {
        this.gamesWonCount = gamesWonCount;
    }

    public Integer getRating() {
        return rating;
    }

    public void setRating(Integer rating) {
        this.rating = rating;
    }

    public Long getLeaderboardId() {
        return leaderboardId;
    }

    public void setLeaderboardId(Long leaderboardId) {
        this.leaderboardId = leaderboardId;
    }

    public Long getPlayerId() {
        return playerId;
    }

    public void setPlayerId(Long playerId) {
        this.playerId = playerId;
    }

    /** To-one relationship, resolved on first access. */
    public Leaderboard getLeaderboard() {
        Long __key = this.leaderboardId;
        if (leaderboard__resolvedKey == null || !leaderboard__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LeaderboardDao targetDao = daoSession.getLeaderboardDao();
            Leaderboard leaderboardNew = targetDao.load(__key);
            synchronized (this) {
                leaderboard = leaderboardNew;
            	leaderboard__resolvedKey = __key;
            }
        }
        return leaderboard;
    }

    public void setLeaderboard(Leaderboard leaderboard) {
        synchronized (this) {
            this.leaderboard = leaderboard;
            leaderboardId = leaderboard == null ? null : leaderboard.getIdentifier();
            leaderboard__resolvedKey = leaderboardId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Player getPlayer() {
        Long __key = this.playerId;
        if (player__resolvedKey == null || !player__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerDao targetDao = daoSession.getPlayerDao();
            Player playerNew = targetDao.load(__key);
            synchronized (this) {
                player = playerNew;
            	player__resolvedKey = __key;
            }
        }
        return player;
    }

    public void setPlayer(Player player) {
        synchronized (this) {
            this.player = player;
            playerId = player == null ? null : player.getIdentifier();
            player__resolvedKey = playerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
